domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: django__django-11001
revision: ef082ebb84f00e38af4e8880d04e8365c2766d34
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - django__django-11001
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Incorrect removal of order_by clause created as\
        \ multiline RawSQL\nDescription\n\t\nHi.\nThe SQLCompiler is ripping off one of my \"order by\" clause, because he\
        \ \"thinks\" the clause was already \"seen\" (in SQLCompiler.get_order_by()). I'm using expressions written as multiline\
        \ RawSQLs, which are similar but not the same. \nThe bug is located in SQLCompiler.get_order_by(), somewhere around\
        \ line computing part of SQL query without ordering:\nwithout_ordering = self.ordering_parts.search(sql).group(1)\n\
        The sql variable contains multiline sql. As a result, the self.ordering_parts regular expression is returning just\
        \ a line containing ASC or DESC words. This line is added to seen set, and because my raw queries have identical last\
        \ lines, only the first clasue is returing from SQLCompiler.get_order_by().\nAs a quick/temporal fix I can suggest\
        \ making sql variable clean of newline characters, like this:\nsql_oneline = ' '.join(sql.split('\\n'))\nwithout_ordering\
        \ = self.ordering_parts.search(sql_oneline).group(1)\nNote: beware of unicode (Py2.x u'') and EOL dragons (\\r).\n\
        Example of my query:\n\treturn MyModel.objects.all().order_by(\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted',\
        \ 'verification')\n\t\t\t\t then 2 else 1 end''', []).desc(),\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted',\
        \ 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime)\n\t\t\t\t else null end''', []).asc(),\n\t\
        \tRawSQL('''\n\t\t\tcase when status not in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime,\
        \ created_at)\n\t\t\t\t else null end''', []).desc())\nThe ordering_parts.search is returing accordingly:\n'\t\t\t\
        \t then 2 else 1 end)'\n'\t\t\t\t else null end'\n'\t\t\t\t else null end'\nSecond RawSQL with a\t\t\t\t else null\
        \ end part is removed from query.\nThe fun thing is that the issue can be solved by workaround by adding a space or\
        \ any other char to the last line. \nSo in case of RawSQL I can just say, that current implementation of avoiding\
        \ duplicates in order by clause works only for special/rare cases (or does not work in all cases). \nThe bug filed\
        \ here is about wrong identification of duplicates (because it compares only last line of SQL passed to order by clause).\n\
        Hope my notes will help you fixing the issue. Sorry for my english.\n"
