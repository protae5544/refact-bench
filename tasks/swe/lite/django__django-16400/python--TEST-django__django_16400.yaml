domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: django__django-16400
revision: 0bd2c0c9015b53c41394a1c0989afbfd94dc2830
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - django__django-16400
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            migrate management command does not respect database\
        \ parameter when adding Permissions.\nDescription\n\t \n\t\t(last modified by Vasanth)\n\t \nWhen invoking migrate\
        \ with a database parameter, the migration runs successfully. However, there seems to be a DB read request that runs\
        \ after the migration. This call does not respect the db param and invokes the db router .\nWhen naming the db as\
        \ a parameter, all DB calls in the context of the migrate command are expected to use the database specified.\nI came\
        \ across this as I am currently using a thread-local variable to get the active DB with a custom DB router for a multi-tenant\
        \ service .\nMinimal example \nSetup the custom middleware and custom DB Router as show below. Then run any DB migration.\
        \ We see that \"read {}\" is being printed before the exception message.\nIdeally none of this code must be called\
        \ as the DB was specified during management command.\nfrom threading import local\nfrom django.conf import settings\n\
        local_state = local()\nclass InvalidTenantException(Exception):\n\tpass\nclass TenantSubdomainMiddleware:\n\tdef __init__(self,\
        \ get_response):\n\t\tself.get_response = get_response\n\tdef __call__(self, request):\n\t\t## Get Subdomain\n\t\t\
        host = request.get_host().split(\":\")[0]\n\t\tlocal_state.subdomain = (\n\t\t\t# We assume single level of subdomain\
        \ : app.service.com \n\t\t\t# HOST_IP : used to for local dev. \n\t\t\thost if host in settings.HOST_IP else host.split(\"\
        .\")[0]\n\t\t)\n\t\tresponse = self.get_response(request)\n\t\treturn response\nclass TenantDatabaseRouter:\n\tdef\
        \ _default_db(self):\n\t\tsubdomain = getattr(local_state, \"subdomain\", None)\n\t\tif subdomain is not None and\
        \ subdomain in settings.TENANT_MAP:\n\t\t\tdb_name = settings.TENANT_MAP[local_state.subdomain]\n\t\t\treturn db_name\n\
        \t\telse:\n\t\t\traise InvalidTenantException()\n\tdef db_for_read(self, model, **hints):\n\t\tprint(\"read\", hints)\n\
        \t\treturn self._default_db()\n\tdef db_for_write(self, model, **hints):\n\t\tprint(\"write\", hints)\n\t\treturn\
        \ self._default_db()\n\tdef allow_relation(self, obj1, obj2, **hints):\n\t\treturn None\n\tdef allow_migrate(self,\
        \ db, app_label, model_name=None, **hints):\n\t\treturn None\n## settings.py\nMIDDLEWARE = [\n\t\"utils.tenant_db_router.TenantSubdomainMiddleware\"\
        ,\n\t\"django.middleware.security.SecurityMiddleware\",\n\t...\n]\nTENANT_MAP = {\"localhost\":\"default\", \"tenant_1\"\
        :\"default\"}\nDATABASE_ROUTERS = [\"utils.tenant_db_router.TenantDatabaseRouter\"]\n"
