domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: django__django-17051
revision: b7a17b0ea0a2061bae752a3a2292007d41825814
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - django__django-17051
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Allow returning IDs in QuerySet.bulk_create() when\
        \ updating conflicts.\nDescription\n\t\nCurrently, when using bulk_create with a conflict handling flag turned on\
        \ (e.g. ignore_conflicts or update_conflicts), the primary keys are not set in the returned queryset, as documented\
        \ in bulk_create.\nWhile I understand using ignore_conflicts can lead to PostgreSQL not returning the IDs when a row\
        \ is ignored (see ​this SO thread), I don't understand why we don't return the IDs in the case of update_conflicts.\n\
        For instance:\nMyModel.objects.bulk_create([MyModel(...)], update_conflicts=True, update_fields=[...], unique_fields=[...])\n\
        generates a query without a RETURNING my_model.id part:\nINSERT INTO \"my_model\" (...)\nVALUES (...)\n\tON CONFLICT(...)\
        \ DO UPDATE ...\nIf I append the RETURNING my_model.id clause, the query is indeed valid and the ID is returned (checked\
        \ with PostgreSQL).\nI investigated a bit and ​this in Django source is where the returning_fields gets removed.\n\
        I believe we could discriminate the cases differently so as to keep those returning_fields in the case of update_conflicts.\n\
        This would be highly helpful when using bulk_create as a bulk upsert feature.\n"
