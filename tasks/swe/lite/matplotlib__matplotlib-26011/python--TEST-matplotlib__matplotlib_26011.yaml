domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: matplotlib__matplotlib-26011
revision: 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - matplotlib__matplotlib-26011
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            xlim_changed not emitted on shared axis\n<!--To\
        \ help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can\
        \ feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen\
        \ an axis is shared with another its registered \"xlim_changed\" callbacks does not get called when the change is\
        \ induced by a shared axis (via sharex=). \r\n\r\nIn _base.py the set_xlim for sibling axis are called with emit=False:\r\
        \n\r\n```\r\nmatplotlib/lib/matplotlib/axes/_base.py:\r\n\r\n/.../\r\ndef set_xlim(...)\r\n/.../\r\n        if emit:\r\
        \n            self.callbacks.process('xlim_changed', self)\r\n            # Call all of the other x-axes that are\
        \ shared with this one\r\n            for other in self._shared_x_axes.get_siblings(self):\r\n                if other\
        \ is not self:\r\n                    other.set_xlim(self.viewLim.intervalx,\r\n                                 \
        \  emit=False, auto=auto)\r\n```\r\n\r\nI'm very new to matplotlib, so perhaps there is a good reason for this? emit=False\
        \ seems to disable both continued \"inheritance\" of axis (why?) and triggering of change callbacks (looking at the\
        \ code above).\r\n\r\nIt seems like one would at least want to trigger the xlim_changed callbacks as they would be\
        \ intended to react to any change in axis limits.\r\n\r\nEdit: Setting emit=True seems to introduce a recursion issue\
        \ (not sure why but as inheritance seems to be passed along anyway it doesn't really matter). Moving the callback\
        \ call to outside of the \"if emit:\"-statement seems to solve the issue as far as I can see when trying it out. Any\
        \ reason to keep it inside the if-statement? \r\n\n"
