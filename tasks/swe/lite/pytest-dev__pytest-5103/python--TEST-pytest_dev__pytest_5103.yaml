domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: pytest-dev__pytest-5103
revision: 10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - pytest-dev__pytest-5103
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Unroll the iterable for all/any calls to get better\
        \ reports\nSometime I need to assert some predicate on all of an iterable, and for that the builtin functions `all`/`any`\
        \ are great - but the failure messages aren't useful at all!\r\nFor example - the same test written in three ways:\r\
        \n\r\n- A generator expression\r\n```sh                                                                          \
        \                                                                                                                \
        \                               \r\n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\n> \
        \      assert all(is_even(number) for number in even_stevens)\r\nE       assert False\r\nE        +  where False =\
        \ all(<generator object test_all_even.<locals>.<genexpr> at 0x101f82ed0>)\r\n```\r\n- A list comprehension\r\n```sh\r\
        \n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\n>       assert all([is_even(number) for\
        \ number in even_stevens])\r\nE       assert False\r\nE        +  where False = all([False, False, False, False, False,\
        \ False, ...])\r\n```\r\n- A for loop\r\n```sh\r\n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\
        \n        for number in even_stevens:\r\n>           assert is_even(number)\r\nE           assert False\r\nE     \
        \       +  where False = is_even(1)\r\n\r\ntest_all_any.py:7: AssertionError\r\n```\r\nThe only one that gives a meaningful\
        \ report is the for loop - but it's way more wordy, and `all` asserts don't translate to a for loop nicely (I'll have\
        \ to write a `break` or a helper function - yuck)\r\nI propose the assertion re-writer \"unrolls\" the iterator to\
        \ the third form, and then uses the already existing reports.\r\n\r\n- [x] Include a detailed description of the bug\
        \ or suggestion\r\n- [x] `pip list` of the virtual environment you are using\r\n```\r\nPackage        Version\r\n\
        -------------- -------\r\natomicwrites   1.3.0  \r\nattrs          19.1.0 \r\nmore-itertools 7.0.0  \r\npip      \
        \      19.0.3 \r\npluggy         0.9.0  \r\npy             1.8.0  \r\npytest         4.4.0  \r\nsetuptools     40.8.0\
        \ \r\nsix            1.12.0 \r\n```\r\n- [x] pytest and operating system versions\r\n`platform darwin -- Python 3.7.3,\
        \ pytest-4.4.0, py-1.8.0, pluggy-0.9.0`\r\n- [x] Minimal example if possible\r\n\n"
