domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: pytest-dev__pytest-8906
revision: 69356d20cfee9a81972dcbf93d8caf9eabe113e8
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - pytest-dev__pytest-8906
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Improve handling of skip for module level\nThis\
        \ is potentially about updating docs, updating error messages or introducing a new API.\r\n\r\nConsider the following\
        \ scenario:\r\n\r\n`pos_only.py` is using Python 3,8 syntax:\r\n```python\r\ndef foo(a, /, b):\r\n    return a + b\r\
        \n```\r\n\r\nIt should not be tested under Python 3.6 and 3.7.\r\nThis is a proper way to skip the test in Python\
        \ older than 3.8:\r\n```python\r\nfrom pytest import raises, skip\r\nimport sys\r\nif sys.version_info < (3, 8):\r\
        \n    skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\r\n\r\n# import must be after the module level\
        \ skip:\r\nfrom pos_only import *\r\n\r\ndef test_foo():\r\n    assert foo(10, 20) == 30\r\n    assert foo(10, b=20)\
        \ == 30\r\n    with raises(TypeError):\r\n        assert foo(a=10, b=20)\r\n```\r\n\r\nMy actual test involves parameterize\
        \ and a 3.8 only class, so skipping the test itself is not sufficient because the 3.8 class was used in the parameterization.\r\
        \n\r\nA naive user will try to initially skip the module like:\r\n\r\n```python\r\nif sys.version_info < (3, 8):\r\
        \n    skip(msg=\"Requires Python >= 3.8\")\r\n```\r\nThis issues this error:\r\n\r\n>Using pytest.skip outside of\
        \ a test is not allowed. To decorate a test function, use the @pytest.mark.skip or @pytest.mark.skipif decorators\
        \ instead, and to skip a module use `pytestmark = pytest.mark.{skip,skipif}.\r\n\r\nThe proposed solution `pytestmark\
        \ = pytest.mark.{skip,skipif}`, does not work  in my case: pytest continues to process the file and fail when it hits\
        \ the 3.8 syntax (when running with an older version of Python).\r\n\r\nThe correct solution, to use skip as a function\
        \ is actively discouraged by the error message.\r\n\r\nThis area feels a bit unpolished.\r\nA few ideas to improve:\r\
        \n\r\n1. Explain skip with  `allow_module_level` in the error message. this seems in conflict with the spirit of the\
        \ message.\r\n2. Create an alternative API to skip a module to make things easier: `skip_module(\"reason\")`, which\
        \ can call `_skip(msg=msg, allow_module_level=True)`.\r\n\r\n\n"
