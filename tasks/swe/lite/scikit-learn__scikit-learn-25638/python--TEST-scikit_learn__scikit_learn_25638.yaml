domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: scikit-learn__scikit-learn-25638
revision: 6adb209acd63825affc884abcd85381f148fb1b0
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - scikit-learn__scikit-learn-25638
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Support nullable pandas dtypes in `unique_labels`\n\
        ### Describe the workflow you want to enable\n\nI would like to be able to pass the nullable pandas dtypes (\"Int64\"\
        , \"Float64\", \"boolean\") into sklearn's `unique_labels` function. Because the dtypes become `object` dtype when\
        \ converted to numpy arrays we get `ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}`:\r\n\r\
        \nRepro with sklearn 1.2.1\r\n```py \r\n    import pandas as pd\r\n    import pytest\r\n    from sklearn.utils.multiclass\
        \ import unique_labels\r\n    \r\n    for dtype in [\"Int64\", \"Float64\", \"boolean\"]:\r\n        y_true = pd.Series([1,\
        \ 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\"\
        )\r\n\r\n        with pytest.raises(ValueError, match=\"Mix type of y not allowed, got types\"):\r\n            unique_labels(y_true,\
        \ y_predicted)\r\n```\n\n### Describe your proposed solution\n\nWe should get the same behavior as when `int64`, `float64`,\
        \ and `bool` dtypes are used, which is no error:  \r\n\r\n```python\r\n    import pandas as pd\r\n    from sklearn.utils.multiclass\
        \ import unique_labels\r\n    \r\n    for dtype in [\"int64\", \"float64\", \"bool\"]:\r\n        y_true = pd.Series([1,\
        \ 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\"\
        )\r\n\r\n        unique_labels(y_true, y_predicted)\r\n```\n\n### Describe alternatives you've considered, if relevant\n\
        \nOur current workaround is to convert the data to numpy arrays with the corresponding dtype that works prior to passing\
        \ it into `unique_labels`.\n\n### Additional context\n\n_No response_\n"
