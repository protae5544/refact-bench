domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: sympy__sympy-17022
revision: f91de695585c1fbc7d4f49ee061f64fcb1c2c4d8
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - sympy__sympy-17022
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            Lambdify misinterprets some matrix expressions\n\
        Using lambdify on an expression containing an identity matrix gives us an unexpected result:\r\n\r\n```python\r\n\
        >>> import numpy as np\r\n>>> n = symbols('n', integer=True)\r\n>>> A = MatrixSymbol(\"A\", n, n)\r\n>>> a = np.array([[1,\
        \ 2], [3, 4]])\r\n>>> f = lambdify(A, A + Identity(n))\r\n>>> f(a)\r\narray([[1.+1.j, 2.+1.j],\r\n       [3.+1.j,\
        \ 4.+1.j]])\r\n```\r\n\r\nInstead, the output should be  `array([[2, 2], [3, 5]])`, since we're adding an identity\
        \ matrix to the array. Inspecting the globals and source code of `f` shows us why we get the result:\r\n\r\n```python\r\
        \n>>> import inspect\r\n>>> print(inspect.getsource(f))\r\ndef _lambdifygenerated(A):\r\n    return (I + A)\r\n>>>\
        \ f.__globals__['I']\r\n1j\r\n```\r\n\r\nThe code printer prints `I`, which is currently being interpreted as a Python\
        \ built-in complex number. The printer should support printing identity matrices, and signal an error for unsupported\
        \ expressions that might be misinterpreted.\n"
