domain: swe-lite
topic: python
train_or_test: TEST
repo: ''
task_name: sympy__sympy-21171
revision: aa22709cb7df2d7503803d4b2c0baa7aa21440b6
dockerfile: ./Dockerfile
integrations_yaml: ../../extra/_integrations.yaml
variables_yaml: ./_variables.yaml
verification:
    run_python: ../../extra/verification.py
    run_python_params:
    - sympy__sympy-21171
    - princeton-nlp/SWE-bench_Lite
    - test
task:
-   role: user
    content: "\n            You are solving a Github issue in the repository .\n            You must make the changes to solve,\
        \ close, or address the issue, directly in the code.\n            _print_SingularityFunction() got an unexpected keyword\
        \ argument 'exp'\nOn a Jupyter Notebook cell, type the following:\r\n\r\n```python\r\nfrom sympy import *\r\nfrom\
        \ sympy.physics.continuum_mechanics import Beam\r\n# Young's modulus\r\nE = symbols(\"E\")\r\n# length of the beam\r\
        \nL = symbols(\"L\")\r\n# concentrated load at the end tip of the beam\r\nF = symbols(\"F\")\r\n# square cross section\r\
        \nB, H = symbols(\"B, H\")\r\nI = B * H**3 / 12\r\n# numerical values (material: steel)\r\nd = {B: 1e-02, H: 1e-02,\
        \ E: 210e09, L: 0.2, F: 100}\r\n\r\nb2 = Beam(L, E, I)\r\nb2.apply_load(-F, L / 2, -1)\r\nb2.apply_support(0, \"fixed\"\
        )\r\nR0, M0 = symbols(\"R_0, M_0\")\r\nb2.solve_for_reaction_loads(R0, M0)\r\n```\r\n\r\nThen:\r\n\r\n```\r\nb2.shear_force()\r\
        \n```\r\n\r\nThe following error appears:\r\n```\r\n---------------------------------------------------------------------------\r\
        \nTypeError                                 Traceback (most recent call last)\r\n/usr/local/lib/python3.8/dist-packages/IPython/core/formatters.py\
        \ in __call__(self, obj)\r\n    343             method = get_real_method(obj, self.print_method)\r\n    344      \
        \       if method is not None:\r\n--> 345                 return method()\r\n    346             return None\r\n \
        \   347         else:\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/interactive/printing.py in _print_latex_png(o)\r\
        \n    184         \"\"\"\r\n    185         if _can_print(o):\r\n--> 186             s = latex(o, mode=latex_mode,\
        \ **settings)\r\n    187             if latex_mode == 'plain':\r\n    188                 s = '$\\\\displaystyle %s$'\
        \ % s\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py in __call__(self, *args, **kwargs)\r\
        \n    371 \r\n    372     def __call__(self, *args, **kwargs):\r\n--> 373         return self.__wrapped__(*args, **kwargs)\r\
        \n    374 \r\n    375     @property\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in latex(expr,\
        \ **settings)\r\n   2913 \r\n   2914     \"\"\"\r\n-> 2915     return LatexPrinter(settings).doprint(expr)\r\n   2916\
        \ \r\n   2917 \r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in doprint(self, expr)\r\n  \
        \  252 \r\n    253     def doprint(self, expr):\r\n--> 254         tex = Printer.doprint(self, expr)\r\n    255 \r\
        \n    256         if self._settings['mode'] == 'plain':\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py\
        \ in doprint(self, expr)\r\n    289     def doprint(self, expr):\r\n    290         \"\"\"Returns printer's representation\
        \ for expr (as a string)\"\"\"\r\n--> 291         return self._str(self._print(expr))\r\n    292 \r\n    293     def\
        \ _print(self, expr, **kwargs):\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py in _print(self,\
        \ expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if\
        \ hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n\
        \    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\
        \n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in _print_Add(self, expr, order)\r\n    381 \
        \            else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\
        \n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\"\
        \ % term_tex\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\
        \n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\
        \n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object,\
        \ fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py\
        \ in _print_Mul(self, expr)\r\n    565             # use the original expression here, since fraction() may have\r\
        \n    566             # altered it when producing numer and denom\r\n--> 567             tex += convert(expr)\r\n\
        \    568 \r\n    569         else:\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in convert(expr)\r\
        \n    517                                isinstance(x.base, Quantity)))\r\n    518 \r\n--> 519                 return\
        \ convert_args(args)\r\n    520 \r\n    521         def convert_args(args):\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py\
        \ in convert_args(args)\r\n    523 \r\n    524                 for i, term in enumerate(args):\r\n--> 525        \
        \             term_tex = self._print(term)\r\n    526 \r\n    527                     if self._needs_mul_brackets(term,\
        \ first=(i == 0),\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\
        \n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\
        \n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object,\
        \ fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py\
        \ in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383\
        \             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385  \
        \               term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py\
        \ in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328   \
        \              if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr,\
        \ **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return\
        \ self.emptyPrinter(expr)\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in _print_Mul(self,\
        \ expr)\r\n    569         else:\r\n    570             snumer = convert(numer)\r\n--> 571             sdenom = convert(denom)\r\
        \n    572             ldenom = len(sdenom.split())\r\n    573             ratio = self._settings['long_frac_ratio']\r\
        \n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in convert(expr)\r\n    505         def convert(expr):\r\
        \n    506             if not expr.is_Mul:\r\n--> 507                 return str(self._print(expr))\r\n    508    \
        \         else:\r\n    509                 if self.order not in ('old', 'none'):\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py\
        \ in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328   \
        \              if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr,\
        \ **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return\
        \ self.emptyPrinter(expr)\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in _print_Add(self,\
        \ expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex\
        \ = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex\
        \ = r\"\\left(%s\\right)\" % term_tex\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py in _print(self,\
        \ expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if\
        \ hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n\
        \    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\
        \n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/latex.py in _print_Pow(self, expr)\r\n    649        \
        \ else:\r\n    650             if expr.base.is_Function:\r\n--> 651                 return self._print(expr.base,\
        \ exp=self._print(expr.exp))\r\n    652             else:\r\n    653                 tex = r\"%s^{%s}\"\r\n\r\n/usr/local/lib/python3.8/dist-packages/sympy/printing/printer.py\
        \ in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328   \
        \              if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr,\
        \ **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return\
        \ self.emptyPrinter(expr)\r\n\r\nTypeError: _print_SingularityFunction() got an unexpected keyword argument 'exp'\r\
        \n```\n"
